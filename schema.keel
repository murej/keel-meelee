enum DaysInAWeek {
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
}

enum MealType {
    Breakfast
    Lunch
    Dinner
}

model MealTime {
    fields {
        day DaysInAWeek
        type MealType
    }

    actions {
        get getMealTime(id)
        list listMealTimes(id)
    }

    @permission(
        actions: [get, list, create, update, delete],
        expression: ctx.isAuthenticated
    )
}

model Dish {
    fields {
        name Text
        recipe Text
        portions Number
        meals Meal[]
    }

    actions {
        get getDish(id)
        list listDishes()
        create createDish() with (name, recipe, portions)
        update updateDishDetails(id) with (name, recipe)
        update updateRemainingPortions(id) with (portions)
        delete deleteDish(id)
    }

    @permission(
        actions: [get, list, create, update, delete],
        expression: ctx.isAuthenticated
    )
}

model Meal {
    fields {
        time MealTime
        plan Plan
        dish Dish?
    }

    actions {
        get getMeal(id)
        list listMeals()
        // list listMyMeals(day?) {
        //     @where(meal.plan.owner == ctx.identity)
        // }
        create createMealExistingDish() with (time.day, time.type, dish.id, plan.id)
        create createMeal() with (
            time.day,
            time.type,
            dish.name,
            dish.recipe,
            dish.portions,
            plan.id,
        )
        update updateMeal(id) with (time.day?, time.type?, dish.id?, plan.id?)
        delete deleteMeal(id)
    }

    @permission(
        actions: [get, list, create, update, delete],
        expression: ctx.isAuthenticated
    )
}

model Plan {
    fields {
        meals Meal[]
        mouthsToFeed Number
        weekNumber Number @unique
        owner Identity
    }

    actions {
        get getPlan(id)
        get getMyWeeklyPlan(weekNumber) {
            @where(plan.owner == ctx.identity)
        }
        list listPlans()
        list listMyPlan(weekNumber?, meals.time.day?, meals.time.type?) {
            @where(plan.owner == ctx.identity)
        }
        list listMyDailyPlan(weekNumber, meals.time.day) {
            @where(plan.owner == ctx.identity)
        }
        create createPlan() with (meals.id?, mouthsToFeed, weekNumber) {
            @set(plan.owner = ctx.identity)
        }
        update updatePlanMeal(id) with (meals.id?, mouthsToFeed?, weekNumber?)
        delete deletePlan(id)
    }

    @permission(
        actions: [get, list, create, update, delete],
        expression: ctx.isAuthenticated
    )
}
